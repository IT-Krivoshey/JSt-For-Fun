{"version":3,"sources":["ColorButton.js","InfoButton.js","App.js","serviceWorker.js","index.js"],"names":["componentToHex","num","hex","toString","length","changeColor","r","Math","floor","random","g","b","rgbToHex","rgbAndHex","rgb","document","body","style","ColorButton","useState","setRgbAndHex","className","onClick","InfoButton","count","setCount","btnUpDown","setBtnUpDown","btnOnOut","setBtnOnOut","onMouseDown","onMouseUp","onMouseOver","onMouseOut","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAEA,SAASA,EAAeC,GACtB,IAAIC,EAAMD,EAAIE,SAAS,IACvB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,EAOxC,SAASG,IACP,IAAIC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBP,EARN,SAAkBI,EAAGI,EAAGC,GACtB,MAAO,IAAMX,EAAeM,GAAKN,EAAeU,GAAKV,EAAeW,GAO1DC,CAASN,EAAGI,EAAGC,GACrBE,EAAS,cAAUP,EAAV,aAAgBI,EAAhB,aAAsBC,EAAtB,aAA4BT,GACrCY,EAAG,cAAUR,EAAV,aAAgBI,EAAhB,aAAsBC,EAAtB,KAIP,OAFAI,SAASC,KAAKC,MAAd,sBAAqCH,EAArC,KAEOD,EAcMK,MAXf,WAAwB,IAAD,EACaC,mBAAS,8BADtB,mBACdN,EADc,KACHO,EADG,KAGrB,OACE,yBAAKC,UAAU,eACb,4BAAQC,QAAS,kBAAMF,EAAaf,OAApC,gBACA,2BAAIQ,KCLKU,MAvBf,WAAuB,IAAD,EACMJ,mBAAS,GADf,mBACbK,EADa,KACNC,EADM,OAEcN,mBAAS,MAFvB,mBAEbO,EAFa,KAEFC,EAFE,OAGYR,mBAAS,OAHrB,mBAGbS,EAHa,KAGHC,EAHG,KAKpB,OACE,yBAAKR,UAAU,cACb,4BACEC,QAAS,kBAAMG,EAASD,EAAQ,IAChCM,YAAa,kBAAMH,EAAa,SAChCI,UAAW,kBAAMJ,EAAa,OAC9BK,YAAa,kBAAMH,EAAY,OAC/BI,WAAY,kBAAMJ,EAAY,SALhC,iBASA,2BAAID,EAAJ,WACA,qCAAWF,GACX,2CAAiBF,KCPRU,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7d13e3d5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction componentToHex(num) {\r\n  let hex = num.toString(16);\r\n  return hex.length === 1 ? \"0\" + hex : hex;\r\n}\r\n\r\nfunction rgbToHex(r, g, b) {\r\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nfunction changeColor() {\r\n  let r = Math.floor(Math.random() * 256);\r\n  let g = Math.floor(Math.random() * 256);\r\n  let b = Math.floor(Math.random() * 256);\r\n  let hex = rgbToHex(r, g, b);\r\n  let rgbAndHex = `rgb(${r}, ${g}, ${b}) ${hex}`;\r\n  let rgb = `rgb(${r}, ${g}, ${b})`;\r\n\r\n  document.body.style = `background: ${rgb};`;\r\n\r\n  return rgbAndHex;\r\n}\r\n\r\nfunction ColorButton() {\r\n  const [rgbAndHex, setRgbAndHex] = useState(\"rgb(255, 255, 255) #ffffff\");\r\n\r\n  return (\r\n    <div className=\"colorButton\">\r\n      <button onClick={() => setRgbAndHex(changeColor())}>Change Color</button>\r\n      <p>{rgbAndHex}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorButton;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction InfoButton() {\r\n  const [count, setCount] = useState(0);\r\n  const [btnUpDown, setBtnUpDown] = useState(\"UP\");\r\n  const [btnOnOut, setBtnOnOut] = useState(\"OUT\");\r\n\r\n  return (\r\n    <div className=\"InfoButton\">\r\n      <button\r\n        onClick={() => setCount(count + 1)}\r\n        onMouseDown={() => setBtnUpDown(\"DOWN\")}\r\n        onMouseUp={() => setBtnUpDown(\"UP\")}\r\n        onMouseOver={() => setBtnOnOut(\"ON\")}\r\n        onMouseOut={() => setBtnOnOut(\"OUT\")}\r\n      >\r\n        Down-Up-Click\r\n      </button>\r\n      <p>{btnOnOut} Button</p>\r\n      <p>Button {btnUpDown}</p>\r\n      <p>Click count: {count}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoButton;\r\n","import React from \"react\";\r\nimport ColorButton from \"./ColorButton\";\r\nimport InfoButton from \"./InfoButton\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <InfoButton />\r\n      <ColorButton />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}